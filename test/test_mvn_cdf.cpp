/** @file test_mvn_cdf.cpp
 * @author Mark J. Olah (mjo\@cs.unm DOT edu)
 * @date 2017-2018
 */
#include<iostream>
#include "test_prior_hessian.h"
#include "PriorHessian/mvn_cdf.h"
#include "PriorHessian/util.h"

using namespace prior_hessian;

static int N_samples=41;

static VecT sample_f = {
  0.02260327218569867E+00,
  0.1548729518584100E+00,
  0.4687428083352184E+00,
  0.7452035868929476E+00,
  0.8318608306874188E+00,
  0.8410314261134202E+00,
  0.1377019384919464E+00,
  0.1621749501739030E+00,
  0.1827411243233119E+00,
  0.2010067421506235E+00,
  0.2177751155265290E+00,
  0.2335088436446962E+00,
  0.2485057781834286E+00,
  0.2629747825154868E+00,
  0.2770729823404738E+00,
  0.2909261168683812E+00,
  0.3046406378726738E+00,
  0.3183113449213638E+00,
  0.3320262544108028E+00,
  0.3458686754647614E+00,
  0.3599150462310668E+00,
  0.3742210899871168E+00,
  0.3887706405282320E+00,
  0.4032765198361344E+00,
  0.4162100291953678E+00,
  0.6508271498838664E+00,
  0.8318608306874188E+00,
  0.0000000000000000,
  0.1666666666539970,
  0.2500000000000000,
  0.3333333333328906,
  0.5000000000000000,
  0.7452035868929476,
  0.1548729518584100,
  0.1548729518584100,
  0.06251409470431653,
  0.7452035868929476,
  0.1548729518584100,
  0.1548729518584100,
  0.06251409470431653,
  0.6337020457912916 };
  
static VecT sample_r = {
     0.500,  0.500,  0.500,  0.500,  0.500,
     0.500, -0.900, -0.800, -0.700, -0.600,
    -0.500, -0.400, -0.300, -0.200, -0.100,
     0.000,  0.100,  0.200,  0.300,  0.400,
     0.500,  0.600,  0.700,  0.800,  0.900,
     0.673,  0.500, -1.000, -0.500,  0.000,
     0.500,  1.000,  0.500,  0.500,  0.500,
     0.500,  0.500,  0.500,  0.500,  0.500,
     0.500 };
     
static VecT sample_x = {
    -2.0, -1.0,  0.0,  1.0,  2.0,
     3.0, -0.2, -0.2, -0.2, -0.2,
    -0.2, -0.2, -0.2, -0.2, -0.2,
    -0.2, -0.2, -0.2, -0.2, -0.2,
    -0.2, -0.2, -0.2, -0.2, -0.2,
     1.0,  2.0,  0.0,  0.0,  0.0,
     0.0,  0.0,  1.0,  1.0, -1.0,
    -1.0,  1.0,  1.0, -1.0, -1.0,
     0.7071067811865475 };
     
static VecT sample_y = {
     1.0,  1.0,  1.0,  1.0,  1.0,
     1.0,  0.5,  0.5,  0.5,  0.5,
     0.5,  0.5,  0.5,  0.5,  0.5,
     0.5,  0.5,  0.5,  0.5,  0.5,
     0.5,  0.5,  0.5,  0.5,  0.5,
     0.5,  1.0,  0.0,  0.0,  0.0,
     0.0,  0.0,  1.0, -1.0,  1.0,
    -1.0,  1.0, -1.0,  1.0, -1.0,
     0.7071067811865475 };
     
TEST(MNVCDFTest, bvn_fixed_values)
{
    for(int n=0; n<N_samples; n++) {
        double val = bvn_integral(-sample_x(n), -sample_y(n), sample_r(n));
//         double val_inv = bvn_integral(sample_y(n), sample_x(n), sample_r(n));
        double val_orig = bvn_integral_orig(-sample_x(n), -sample_y(n), sample_r(n));
//         double val_orig_inv = bvn_integral_orig(sample_y(n), sample_x(n), sample_r(n));
//         std::cout<<"x:"<<sample_x(n)<<" y:"<<sample_y(n)<<" r:"<<sample_r(n)<<" f:"<<sample_f(n)<<" val:"<<val<<" val_inv:"<<val_inv<<" val_orig:"<<val_orig<<" val_orig_inv:"<<val_orig_inv<<"\n";
//         std::cout<<"x:"<<sample_x(n)<<" y:"<<sample_y(n)<<" r:"<<sample_r(n)<<" f:"<<sample_f(n)<<" val:"<<val<<" val_orig:"<<val_orig<<"\n";
        EXPECT_TRUE(approx_equal(val, val_orig,1e-9));
        EXPECT_TRUE(approx_equal(val, sample_f(n),1e-6));
    }
}
