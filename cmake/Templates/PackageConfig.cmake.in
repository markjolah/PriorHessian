@PACKAGE_INIT@

#PriorHessianConfig.cmake
#Sets:
# @PROJECT_NAME@_LIBRARIES (set to shared libs if available)
# @PROJECT_NAME@_SHARED_LIBRARIES
# @PROJECT_NAME@_STATIC_LIBRARIES
# @PROJECT_NAME@_BUILD_TYPES

### Find dependencies
include(CMakeFindDependencyMacro)
set_and_check(PACKAGE_FIND_MODULES_PATH @PACKAGE_FIND_MODULES_PATH@)
list(INSERT CMAKE_MODULE_PATH 0 ${PACKAGE_FIND_MODULES_PATH})
#Use find_package because find_dependency does not respect COMPONENTS argument or allow
#re-finding of packages with different COMPONENTS settings
find_package(BLAS REQUIRED COMPONENTS @BLAS_INT_COMPONENT@)
find_package(LAPACK REQUIRED COMPONENTS @BLAS_INT_COMPONENT@)
find_package(Armadillo REQUIRED COMPONENTS BLAS LAPACK CXX11 @BLAS_INT_COMPONENT@)
list(REMOVE_AT CMAKE_MODULE_PATH 0)
#Default CMAKE Find Modules
find_dependency(Boost REQUIRED)
find_dependency(BacktraceException REQUIRED)

### Include targets file.  This will create IMPORTED targets for each build configuration.
include("${CMAKE_CURRENT_LIST_DIR}/${CMAKE_SYSTEM_NAME}/@EXPORT_TARGETS_NAME@.cmake")
#Read in variable @PROJECT_NAME@_PROVIDED_COMPONENTS and @PROJECT_NAME@_<COMPONENT_NAME>_FOUND from configured file,
include("${CMAKE_CURRENT_LIST_DIR}/${CMAKE_SYSTEM_NAME}/@PROJECT_NAME@ConfigProvidedComponents.cmake")  #import @PROJECT_NAME@_PROVIDED_COMPONENTS


set(@PROJECT_NAME@_LIBRARIES @PROJECT_NAME@::@PROJECT_NAME@)
set(@PROJECT_NAME@_SHARED_LIBRARIES)
set(@PROJECT_NAME@_STATIC_LIBRARIES)
if(@BUILD_SHARED_LIBS@)
    set(@PROJECT_NAME@_SHARED_LIBRARIES @PROJECT_NAME@::@PROJECT_NAME@)
    if(@BUILD_STATIC_LIBS@)
        set(@PROJECT_NAME@_STATIC_LIBRARIES @PROJECT_NAME@::@PROJECT_NAME@_STATIC)
    endif()
else()
    set(@PROJECT_NAME@_STATIC_LIBRARIES @PROJECT_NAME@::@PROJECT_NAME@)
endif()

get_target_property(@PROJECT_NAME@_BUILD_TYPES @PROJECT_NAME@::@PROJECT_NAME@ IMPORTED_CONFIGURATIONS)

check_required_components(@PROJECT_NAME@)
